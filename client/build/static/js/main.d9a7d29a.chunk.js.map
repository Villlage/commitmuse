{"version":3,"sources":["actions/types.js","store.js","reducers/user.js","reducers/admin.js","actions/user.js","components/Register.js","App.js","serviceWorker.js","index.js"],"names":["ADMIN","REGISTER","rootReducer","combineReducers","user","state","action","type","apiErrors","error","admin","createLogger","level","collapsed","Register","data","dispatch","axios","post","email","password","then","response","catch","RegisterForm","props","useForm","register","handleSubmit","errors","useDispatch","apiError","useSelector","onSubmit","name","placeholder","ref","required","App","Boolean","window","location","hostname","match","history","createBrowserHistory","store","initialState","middlewares","reduxThunk","createStore","applyMiddleware","__preloaded_state__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQAAaA,EAAQ,QACRC,EAAW,W,4bCMxB,IAAMC,EAAcC,YAAgB,CAClCC,KCNa,WAA2C,IAArBC,EAAoB,uDAAZ,GAAIC,EAAQ,uCAEvD,OADiBA,EAATC,MAEN,KAAKN,EACH,O,yVAAO,CAAP,GACKI,EADL,CAEEG,UAAWF,EAAOG,QAEtB,QACE,OAAOJ,IDFXK,MEPa,WAA4C,IAArBL,EAAoB,uDAAZ,GAE5C,QAFwD,wCAChDE,MAEN,KAAKP,EACH,O,yVAAO,IACFK,GAER,QACG,OAAOA,M,GFEEM,uBAAa,CAAEC,MAAO,OAAQC,WAAW,I,uCGR3CC,EAAW,SAACC,GACvB,OAAO,SAACC,GACN,OAAOC,IAAMC,KAAN,QAAoB,CAAEC,MAAOJ,EAAKI,MAAOC,SAAUL,EAAKK,WAC5DC,MAAK,SAAAC,GACJN,EAAS,CACLT,KAAMN,EACNQ,MAAO,UAGZc,OAAM,SAAAd,GACLO,EAAS,CACLT,KAAMN,EACNQ,MAAOA,S,MCTJ,SAASe,EAAaC,GAAQ,IAAD,EACCC,cAAnCC,EADkC,EAClCA,SAAUC,EADwB,EACxBA,aAAcC,EADU,EACVA,OAC1Bb,EAAWc,cACXC,EAAWC,aAAY,SAAA3B,GAAK,OAAIA,EAAMD,KAAKK,SAMjD,OACE,0BAAMwB,SAAUL,GALD,SAAAb,GACfC,EAASF,EAASC,QAKhB,2BAAOR,KAAK,OAAO2B,KAAK,QAAQC,YAAY,QAAQC,IAAKT,EAAS,CAAEU,UAAU,MAC7ER,EAAOV,OAAS,oDAChBY,GAAY,yCAEb,2BAAOxB,KAAK,WAAW2B,KAAK,WAAWC,YAAY,WAAWC,IAAKT,EAAS,CAAEU,UAAU,MACvFR,EAAOT,UAAY,uDAEpB,2BAAOb,KAAK,YCfH+B,MANf,WACE,OACE,kBAAEd,EAAF,O,MCMgBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,8EAeO,IAAMC,EAAUC,cAEVC,EPHE,WAAwB,IAAvBC,EAAsB,uDAAP,GACvBC,EAAc,CAACC,KAOrB,IAAMH,EAAQI,YAAYhD,EAAa6C,EAAcI,IAAe,WAAf,EAAmBH,IACxE,OAAOF,EONYI,CAAYV,OAAOY,qBAAuB,IAE/DC,IAASC,OACR,kBAAC,IAAD,CAAUR,MAAOA,GAChB,kBAAC,IAAD,CAAQF,QAASA,GAChB,kBAAC,EAAD,QAGFW,SAASC,eAAe,SDwGnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.d9a7d29a.chunk.js","sourcesContent":["export const ADMIN = 'ADMIN';\nexport const REGISTER = 'REGISTER';","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\n\nimport userReducer from './reducers/user'\nimport adminReducer from './reducers/admin'\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  admin: adminReducer,\n})\n\nconst logger = createLogger({ level: 'info', collapsed: true })\n\nexport default (initialState = {}) => {\n  const middlewares = [reduxThunk]\n\n  // Positioning logger at the bottom will only log actions that are going to be applied to the store\n  if (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger)\n  }\n\n  const store = createStore(rootReducer, initialState, applyMiddleware(...middlewares))\n  return store\n}\n","import { REGISTER } from '../actions/types';\n\nexport default function userReducer (state = {}, action) {\n  const { type } = action\n  switch (type) {\n    case REGISTER:\n      return {\n        ...state,\n        apiErrors: action.error\n      }\n    default:\n      return state\n  }\n}","import { ADMIN } from '../actions/types';\n\nexport default function adminReducer (state = {}, action) {\n  const { type } = action\n  switch (type) {\n    case ADMIN:\n      return {\n        ...state,\n      }\n   default:\n      return state\n  }\n}","import { REGISTER } from './types'\nimport axios from 'axios'\n\n\nexport const Register = (data) => {\n  return (dispatch) => {\n    return axios.post(`login`, { email: data.email, password: data.password } )\n      .then(response => {\n        dispatch({\n            type: REGISTER,\n            error: null\n        })\n      })\n      .catch(error => {\n        dispatch({\n            type: REGISTER,\n            error: error\n        })\n      });\n  };\n};\n","import React from 'react';\nimport useForm from \"react-hook-form\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Register } from './../actions/user'\nimport \"./styles.css\"\n\n\nexport default function RegisterForm(props) {\n  const { register, handleSubmit, errors } = useForm();\n  const dispatch = useDispatch();\n  const apiError = useSelector(state => state.user.error);\n\n  const onSubmit = data => {\n    dispatch(Register(data))\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input type=\"text\" name=\"email\" placeholder=\"Email\" ref={register({ required: true })} />\n      {errors.email && <p> \"Email is required\" </p> }\n      {apiError && <p> apiError </p> }\n\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" ref={register({ required: true })} />\n      {errors.password && <p> \"Password is required\" </p>}\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n","import React from 'react';\nimport RegisterForm from './components/Register';\n\n\nfunction App() {\n  return (\n    < RegisterForm />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom'\nimport createStore from './store'\nimport { createBrowserHistory } from 'history';\nimport { Provider } from 'react-redux'\nimport App from './App';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nexport const history = createBrowserHistory();\n\nexport const store = createStore(window.__preloaded_state__ || {})\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Router history={history}>\n\t\t\t<App />\n\t\t</Router>\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}