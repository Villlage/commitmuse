{"version":3,"sources":["actions/types.js","store.js","reducers/user.js","reducers/admin.js","history.js","actions/user.js","components/Register/index.js","components/Login/index.js","components/User/index.js","App.js","serviceWorker.js","index.js"],"names":["ADMIN","REGISTER","LOGIN","rootReducer","combineReducers","user","state","action","type","error","admin","createLogger","level","collapsed","history","createBrowserHistory","Register","data","dispatch","axios","post","email","password","then","response","catch","Login","push","pathname","name","RegisterForm","props","useForm","register","handleSubmit","errors","useDispatch","apiError","useSelector","onSubmit","placeholder","ref","required","LoginForm","User","location","this","Component","App","exact","path","component","Boolean","window","hostname","match","store","initialState","middlewares","reduxThunk","createStore","applyMiddleware","__preloaded_state__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23f9f3d9.chunk.js","sourcesContent":["export const ADMIN = \"ADMIN\";\nexport const REGISTER = \"REGISTER\";\nexport const LOGIN = \"LOGIN\";\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\n\nimport userReducer from \"./reducers/user\";\nimport adminReducer from \"./reducers/admin\";\n\nconst rootReducer = combineReducers({\n    user: userReducer,\n    admin: adminReducer\n});\n\nconst logger = createLogger({ level: \"info\", collapsed: true });\n\nexport default (initialState = {}) => {\n    const middlewares = [reduxThunk];\n\n    // Positioning logger at the bottom will only log actions that are going to be applied to the store\n    if (process.env.NODE_ENV === \"development\") {\n        middlewares.push(logger);\n    }\n\n    const store = createStore(\n        rootReducer,\n        initialState,\n        applyMiddleware(...middlewares)\n    );\n    return store;\n};\n","import { REGISTER, LOGIN } from \"../actions/types\";\n\nexport default function userReducer(state = {}, action) {\n    const { type } = action;\n    switch (type) {\n        case REGISTER:\n            return {\n                ...state,\n                error: action.error\n            };\n        case LOGIN:\n            return {\n                ...state,\n                error: action.error\n            };\n\n        default:\n            return state;\n    }\n}\n","import { ADMIN } from \"../actions/types\";\n\nexport default function adminReducer(state = {}, action) {\n    const { type } = action;\n    switch (type) {\n        case ADMIN:\n            return {\n                ...state\n            };\n        default:\n            return state;\n    }\n}\n","import { createBrowserHistory } from \"history\";\n\nlet history = createBrowserHistory();\n\nexport default history;\n","import { REGISTER, LOGIN } from \"./types\";\nimport history from \"./../history\";\n\nimport axios from \"axios\";\n\nexport const Register = data => {\n    return dispatch => {\n        return axios\n            .post(`register`, { email: data.email, password: data.password })\n            .then(response => {\n                dispatch({\n                    type: REGISTER,\n                    error: null\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: REGISTER,\n                    error: error\n                });\n            });\n    };\n};\n\nexport const Login = data => {\n    return dispatch => {\n        return axios\n            .post(`login`, { email: data.email, password: data.password })\n            .then(response => {\n                history.push({ pathname: \"/user\", state: { name: \"gilad\" } });\n            })\n            .catch(error => {\n                dispatch({\n                    type: LOGIN,\n                    error: error.response.data\n                });\n            });\n    };\n};\n","import React from \"react\";\nimport useForm from \"react-hook-form\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Register } from \"./../../actions/user\";\nimport \"./styles.css\";\n\nexport default function RegisterForm(props) {\n    const { register, handleSubmit, errors } = useForm();\n    const dispatch = useDispatch();\n    const apiError = useSelector(state => state.user.error);\n\n    const onSubmit = data => {\n        dispatch(Register(data));\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Email\"\n                ref={register({ required: true })}\n            />\n            {errors.email && <p> \"Email is required\" </p>}\n            {apiError && <p> apiError </p>}\n\n            <input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                ref={register({ required: true })}\n            />\n            {errors.password && <p> \"Password is required\" </p>}\n\n            <input type=\"submit\" />\n        </form>\n    );\n}\n","import React from \"react\";\nimport useForm from \"react-hook-form\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Login } from \"./../../actions/user\";\nimport \"./styles.css\";\n\nexport default function LoginForm(props) {\n    const { register, handleSubmit, errors } = useForm();\n    const dispatch = useDispatch();\n    const apiError = useSelector(state => state.user.error);\n\n    const onSubmit = data => {\n        dispatch(Login(data));\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Email\"\n                ref={register({ required: true })}\n            />\n            {errors.email && <p> \"Email is required\" </p>}\n            {apiError && <p> {apiError} </p>}\n\n            <input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                ref={register({ required: true })}\n            />\n            {errors.password && <p> \"Password is required\" </p>}\n\n            <input type=\"submit\" />\n        </form>\n    );\n}\n","import React, { Component } from \"react\";\n\nclass User extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: props.location.state.name\n        };\n    }\n\n    render() {\n        return <h1> {this.state.name} </h1>;\n    }\n}\n\nexport default User;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\n\nimport RegisterForm from \"./components/Register\";\nimport LoginForm from \"./components/Login\";\nimport User from \"./components/User\";\n\nfunction App() {\n    return (\n        <Switch>\n            <Route exact path={\"/register\"} component={RegisterForm} />\n            <Route exact path={\"/login\"} component={LoginForm} />\n            <Route exact path={\"/user\"} component={User} />\n        </Switch>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport createStore from \"./store\";\n\nimport history from \"./history\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nexport const store = createStore(window.__preloaded_state__ || {});\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}